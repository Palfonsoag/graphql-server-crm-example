"""
Set the privilege of the client
"""
enum ClientType {
  BASIC
  PREMIUM
}

"""
Set the state of an order
"""
enum orderState {
  PENDING
  COMPLETED
  CANCELED
}

"""
Email Input
"""
input EmailInput {
  email: String
}

"""
clients Input
"""
input ClientInput {
  id: ID
  name: String!
  lastName: String!
  company: String!
  emails: [EmailInput]
  age: Int!
  clientType: ClientType!
  orders: [OrderInput]
  seller: ID
}

"""
User Input
"""
input UserInput {
  user: String!
  password: String!
  name: String!
  rol: String!
}

"""
Products Input
"""
input ProductInput {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}

"""
Order Input
"""
input OrderInput {
  id: ID
  order: [ProductOrderInput]
  total: Int
  orderDate: String
  client: ID
  state: orderState
  seller: ID
}

input ProductOrderInput {
  id: ID
  volume: Int
}

"""
Type of TopBuyers
"""
type TopBuyers {
  total: Float
  client: [Client]
}

"""
Type of TopSellers
"""
type TopSellers {
  total: Float
  seller: [User]
}

"""
Type of Token
"""
type Token {
  token: String!
}
"""
Type of User
"""
type User {
  id: ID
  user: String
  name: String
  rol: String
}

"""
Type of email
"""
type Email {
  email: String
}

"""
Fields for Clients
"""
type Client {
  id: ID
  name: String
  lastName: String
  company: String
  emails: [Email]
  age: Int
  clientType: ClientType
  orders: [Order]
}

"""
Fields for Product
"""
type Product {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}

"""
Fields for Order
"""
type Order {
  id: ID
  order: [ProductOrder]
  total: Int
  orderDate: String
  client: ID
  state: orderState
}
"""
Fields for the products in the Order
"""
type ProductOrder {
  id: ID
  volume: Int
}
"""
Resolvers -> queries
"""
type Query {
  #Get a client given an ID. Return a single client
  getClient(id: ID!): Client

  #Get the full list of clients, limit and offset params are optionals, return an array of clients
  getClients(limit: Int, offset: Int, seller: String): [Client]

  #get the count of clients, return an string with the count
  totalClients: String

  #Get the full list of products, limit and offset params are optionals, return an array of products
  getProducts(limit: Int, offset: Int, stock: Boolean): [Product]

  #Get a Product given an ID. Return a single Product
  getProduct(id: ID!): Product

  #get the count of product, return an string with the count
  totalProducts: String

  #Get a client's orders
  getOrdersByClient(client: String): [Order]

  #get top 10 buyers
  topClients: [TopBuyers]

  #get current user
  getLoggedUser: User

  #get top 10 sellers
  topSellers: [TopSellers]
}

"""
resolver name, input with the data and data type that will be returned
"""
type Mutation {
  #Mutation to create new clients
  createClient(input: ClientInput): Client

  #Mutation to update the client
  updateClient(input: ClientInput): Client

  #Mutation to erase one client
  deleteClient(id: ID!): String

  #Mutation to Create a New Product
  createProduct(input: ProductInput): Product

  #Mutation to update the Product
  updateProduct(input: ProductInput): Product

  #Mutation to erase one Product
  deleteProduct(id: ID!): String

  #Mutation to create new order
  createOrder(input: OrderInput): Order

  #Mutation to update an Order
  updateOrderState(input: OrderInput): String

  #Mutation to create new users
  createUser(input: UserInput): String

  #Mutation to authenticate an user
  userAuthentication(user: String!, password: String!): Token
}
